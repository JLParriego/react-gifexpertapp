{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","evento","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","props","ReactDOM","render","document","getElementById"],"mappings":"2MA8CeA,EA1BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACLC,mBAAS,IADJ,mBAClCC,EADkC,KACtBC,EADsB,KAezC,OACE,sBAAMC,SATa,SAACC,GACpBA,EAAOC,iBACHJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAkBP,GAAlB,mBAAiCO,OAC/CN,EAAc,MAKhB,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAdhB,SAACP,GACzBF,EAAcE,EAAOQ,OAAOF,a,+BCdnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDAEyBC,UAAUH,GAFnC,8DAIAI,MAAMF,GAJN,cAIbG,EAJa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GACrB,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAVlB,kBAaZM,GAbY,4CAAH,sDCRPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACvC,OACE,sBAAKc,UAAU,2DAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCmBGO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECRb,SAACA,GAAc,IAAD,EACdd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAkBxC,OAZAC,qBAAU,WAERxB,EAAQC,GACPwB,MAAK,SAAAC,GACFH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAIhB,CAACpB,IAEGqB,EDTuBK,CAAa1B,GAAhCa,EAD4B,EAClCN,KAAca,EADoB,EACpBA,QAEnB,OACE,qCACE,oBAAIJ,UAAU,sDAAd,SAAqEhB,IACpEoB,EAAU,wCAAiB,KAC5B,qBAAKJ,UAAU,YAAf,SACGH,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEEjBgB,EAxBM,SAACC,GAAW,IAAD,EACM1C,mBAAS,CAAC,YADhB,mBACvBQ,EADuB,KACXT,EADW,KAQ9B,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BACGS,EAAWe,KAAI,SAACT,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,YCrBxB6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.c8721511.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from 'prop-types';\n\n\n/* **Componente AddCategory**\n- Creamos el State inputValue y setInputValue como la fx para cambiarlo, como State inicial fijamos cadena vacia ''.\n\n- Como propiedad de este Componente tenemos la fx setCategories\n\n- Definimos la fx handleInputChange que es llamada en el evento onChange del input y que reacciona a lo que escribe el usuario en el input, capturando el evento y cambiando el State inputValue con el value de ese evento utilizando la fx setInputValue.\n\n- Definimos la fx handleSubmit que es llamada en el evento onSubmit del formulario y que reacciona al pulsar enter en el input y lanzar el formulario\n  - Prevenimos que el formulario se envie al servidor, evento por defecto de un formulario.\n  - Llamamos a la fx setCategories que cambia el State categories del Componente Principal GifExpertApp, metemos como parámetros categories que es el State actual de categories y que desestructuramos junto con el State inputValue pasando todos a ser el nuevo State de categories de GifExpertApp.\n  - Acto seguido fijamos el State de inputValue como '' para dejarlo vacio.\n\n  -Retornamos un formulario con un input cuyo valor es el State inputValue y que puede modificar el usuario y nosotros controlamos con las fxs handleInputChange y handleSubmit que se activan con onChange y onSubmit.\n\n*/\n\nconst AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = (evento) => {\n    setInputValue(evento.target.value);\n  };\n\n  const handleSubmit = (evento) => {\n    evento.preventDefault();\n    if (inputValue.trim().length > 2) {\n      setCategories((categories) => [ inputValue, ...categories]);\n      setInputValue(\"\");\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory;\n","/* ** fx getGifs**\n- fx que es llamada en GifGrid \n- fx async getGifs llama al API de giphy que previamente hemos probado con Postman.\n- Mediante un map guardamos en gifs un objeto de objetos o gifs con los datos que necesitamos, id, title y url\n\n\n*/\n\n\n\nexport const getGifs = async (category) => {\n    const url =\n      `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=5&api_key=wUQ9WWV00jaXOZIHn2Yymald9fUCCoUi`;\n\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n    const gifs = data.map((img) => {\n      return {\n        id: img.id,\n        title: img.title,\n        url: img.images.downsized_medium.url,\n      };\n    });\n    return(gifs);\n  };","import React from \"react\";\n\nexport const GifGridItem = ({ id, title, url }) => {\n  return (\n    <div className='card animate__animated animate__bounce animate__delay-2s'>\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\nimport { GifGridItem } from \"./GifGridItem\";\n\n\n/* **Component GigGrid**\n\n-useEffect vela para que solo haya un renderizado del componente a medida que vaya habiendo actualizaciones del estado del componente\n\n-Llamamos a la fx getGifs con category como argumento, category es el resultado de mapear el State categories de GiExpertApp en elementos category y llamar al componente GifGrid con cadacategory:\n  - fx async getGifs llama al API de giphy que previamente hemos probado con Postman.\n  - La fx mediante un map guarda en gifs un objeto de objetos o gifs con los datos que necesitamos, id, title y url\n  - La fx devueleve una promesa (imgs) y then cambiamos el State images con dicha promesa usando setImages.\n- Devolvemos el Componente GifGridItem por cada elemento de nuestro State images, es decir cada elemento de gifs.\n- Pasamos al Componenete GifGridItem una key y los valores de cada elemento del State images desectructurados usando spread {...img}\n\n- useFetchGifs devuelve el objeto {data:[], loading:true}.\n- llamamos el custom hook useFetchGifs con el argumento category\n- Desectructuramos las consts data y loading para almacenar el resultado de useFetchGifs por separado pero solo nos quedamos con la const loading que es la que necesitamos ahora:\n  - const loading = useFetchGifs.loading\n  - const data = useFetchGifs.data\n\n\n*/\n\nexport const GifGrid = ({ category }) => {\nconst {data: images, loading} = useFetchGifs(category)\n\n  return (\n    <>\n      <h3 className='animate__animated animate__bounce animate__delay-2s'>{category}</h3>\n      {loading ? <p>Loading</p> : null}\n      <div className=\"card-grid\">\n        {images.map((img) => (\n          <GifGridItem key={img.id} {...img} />\n        ))}\n      </div>\n    </>\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\n\n/* **useFetchGifs custom hook**\n\n- useFetchGifs tiene como Prop category que viene del Componente GifGrid que a su vez viene del Componente principal GifExpertApp, siendo category el resultado de mapear el State categories y crear un Componente GifGrid por cada category.\n\n- Definimos es State state y su modificador setState siendo su State inicial un objeto que incluye el array data y el boolean loading.\n\n- useEffect es un hook que indica a React qué tiene que hacer después de renderizarse, después de actualizar el DOM. En este caso solo se va a disparar si la categoría cambia como indicamos en el array, segundo argumento de useEffect\n   - En este caso llamar al helper - fx getGifs.\n   - El helper - fx getGifs devuelve una promesa con un objeto con {id, title, url} de cada imagen y then cambiamos el State state con setState:\n      - Como state le pasamos el objeto que viene con la promesa a data\n      - loading lo pasamos a false\n\n*/\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n\n    getGifs(category)\n    .then(imgs => {\n        setState({\n            data: imgs,\n            loading: false\n        })\n    })\n\n  }, [category]);\n\n  return state; //devuelve el objeto {data:[], loading:true}\n};\n","import React, { useState } from \"react\";\nimport AddCategory from \"./components/AddCategory\";\nimport { GifGrid } from \"./components/GifGrid\";\n\n/* **Componente principal: GifExpertApp**\n- Creamos el State categories y setCategories para cambiarlo, como estado inicial fijammos 'Samurai'\n- Retornamos:\n  - Componente AddCategory donde como Propiedad pasamos la fx setCategories que cambia el State categories\n  - Mapeamos el State categories, y por cada elemento:category creamos un componente GifGrid donde como Propiedad pasamos cada elemento:category\n\n*/\n\nconst GifExpertApp = (props) => {\n  const [categories, setCategories] = useState([\"Samuari\"]);\n  \n\n  /*     const handleAdd = () => {\n            setCategories([...categories, 'Maya'])\n        } */\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n      <ol>\n        {categories.map((category) => (\n          <GifGrid key={category} category={category} />\n        ))}\n      </ol>\n    </>\n  );\n};\n\nGifExpertApp.propTypes = {};\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}